class Queuemaker{
    static private int front, rear, capacity;
    static private int queue[];

    Queuemaker(int c)
    {
        front = rear = 0;
        capacity = c;
        queue = new int[capacity];
    }
    

    public static void enque(int data){
        if(rear == capacity){
            System.out.println("Queue Overflow, Can't add any elements");
        }
        else{
            queue[rear++] = data;
        }
        return;
    }

    public static void denque(){
        if(front == rear){
            System.out.println("Empty Queue, Can't remove any elements");
        }
        else{
            for(int i = 0; i < rear-1; i++){
                queue[i] = queue[i+1];
            }
            rear--;
        }
        return;
    }

    public static void display(){
        if(front == rear){
            System.out.println("Empty stack");
        }
        for(int i = 0; i< rear; i++){
            System.out.print(queue[i]+" ");
        }
        System.out.println();
        return;
    }

}

/**
 * Queue
 */
public class Queue {
    public static void main(String[] args) {
        Queuemaker q = new Queuemaker(5);
        // q.enque(4);
        // q.enque(5);
        // q.enque(6);
        // q.enque(22);
        // q.enque(98);
        
        

        q.display();
        //q.enque(0);
        q.denque();

        
        
    }
}


